from selenium.webdriver.common.by import By
import time
from utils import kb_and_vars
from utils import prices, funcs
from parser_scripts.user_session import get_user_session, user_sessions
import re


def select_option_by_index(option_index, div_xpath, driver):
    div_select_element = driver.find_element(By.XPATH, div_xpath)
    div_select_element.click()

    auction_options = div_select_element.find_elements(By.TAG_NAME, "Option")
    auction_options[option_index].click()

    driver.find_element(By.XPATH, '//*[@id="autocalc-lithuania"]/div/div[2]/div/div[1]').click()

    time.sleep(0.5)


def get_driver(user_id):
    session = get_user_session(user_id)

    return session.driver, session


def parse_price(load_type, auction, dispatch_site, port_of_departure, port_of_delivery, ports, auction_price, user_id,
                actual_locations):
    final_message = ""
    total = ""
    driver, session = get_driver(user_id)

    try:
        driver.get('https://usatranscar.com/#calculator')

        ul_element = driver.find_element(By.ID, "tabs-countries")
        li_elements = ul_element.find_elements(By.TAG_NAME, "li")
        li_elements[3].click()

        driver.execute_script("window.scrollBy(0, 140);")

        time.sleep(0.7)

        input_element = driver.find_element(By.ID, kb_and_vars.load_type_dict[load_type])
        driver.execute_script("arguments[0].click();", input_element)

        # ----AUCTION SELECTION START----

        select_option_by_index(list(kb_and_vars.auction_locations_dict.keys()).index(auction),
                                     '//*[@id="autocalc-lithuania"]/div/div[2]/div/div[2]/div[1]/div', driver)

        # ----AUCTION SELECTION END----

        # ----LOCATION SELECTION START----

        if dispatch_site not in actual_locations:
            dispatch_site = dispatch_site.replace("-", "")
            dispatch_site = re.sub(r'\s+', ' ', dispatch_site)


        select_option_by_index(actual_locations.index(dispatch_site) + 1,
                                     '//*[@id="autocalc-lithuania"]/div/div[2]/div/div[2]/div[2]/div', driver)

        # ----LOCATION SELECTION END----

        # ----PORT DEPARTURE SELECTION START----

        select_option_by_index(ports.index(port_of_departure) + 1,
                                     '//*[@id="autocalc-lithuania"]/div/div[2]/div/div[2]/div[3]/div', driver)

        # ----PORT DEPARTURE SELECTION END----

        # ----PORT DELIVERY SELECTION START----

        select_element = driver.find_element(By.XPATH, '//select[@id="portarrivallist-lithuania"]')

        options = select_element.find_elements(By.TAG_NAME, "option")

        if len(options) != 1:
            select_option_by_index(1, '//*[@id="autocalc-lithuania"]/div/div[2]/div/div[2]/div[4]/div', driver)

        time.sleep(0.7)

        input_div = driver.find_element(By.XPATH, '//*[@id="autocalc-lithuania"]/div/div[2]/div/div[3]/div/div')

        input_field = input_div.find_element(By.TAG_NAME, "input")

        input_field.send_keys(auction_price)

        temp_div = driver.find_element(By.XPATH, '//*[@id="autocalc-lithuania"]/div/div[2]/div/div[1]')
        temp_div.click()

        time.sleep(0.7)

        # ----PORT DELIVERY SELECTION END----

        # ----MAKING FINAL MESSAGE----

        land_delivery = funcs.increase_price(driver.find_element(By.XPATH,
                                                  '//*[@id="price-per-car-lithuania"]/table/tbody/tr[1]/td[2]').text, 0)

        ocean_shipping = funcs.increase_price(driver.find_element(By.XPATH,
                                                   '//*[@id="price-per-car-lithuania"]/table/tbody/tr[2]/td[2]').text, 200)

        port_service = funcs.increase_price(driver.find_element(By.XPATH,
                                           '//*[@id="price-per-car-lithuania"]/table/tbody/tr[3]/td[2]').text,
                                            prices.port_service_delta)

        # our_services = funcs.make_price_string(prices.our_services)

        delivery_klaipeda_minsk = funcs.make_price_string(prices.delivery_klaipeda_minsk)
        delivery_price = funcs.sum_prices([land_delivery, ocean_shipping, port_service, delivery_klaipeda_minsk])

        car_price = driver.find_element(By.XPATH, '//*[@id="price-per-car-lithuania"]/table/tbody/tr[7]/td[2]').text

        auction_fee = driver.find_element(By.XPATH, '//*[@id="price-per-car-lithuania"]/table/tbody/tr[8]/td[2]').text


        total = funcs.sum_prices([delivery_price,
                                  car_price, auction_fee])

        final_message = f"‚úÖ –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ —Å—É—à–µ: {land_delivery}\n‚úÖ –î–æ—Å—Ç–∞–≤–∫–∞ –æ–∫–µ–∞–Ω: {ocean_shipping}\n‚úÖ –î–æ—Å—Ç–∞–≤–∫–∞ –ö–ª–∞–π–ø–µ–¥–∞ –º–∏–Ω—Å–∫: {delivery_klaipeda_minsk} (—Ü–µ–Ω–∞ –º–æ–∂–µ—Ç –≤–∞—Ä—å–∏—Ä–æ–≤–∞—Ç—å—Å—è –æ—Ç $650 –¥–æ $1100 –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏ —Ä—ã–Ω–∫–∞)\n‚úÖ –£—Å–ª—É–≥–∏ –ø–æ—Ä—Ç–∞: {port_service}, –æ–Ω–∏ –≤ —Å–µ–±—è –≤–∫–ª—é—á–∞—é—Ç:\n  ‚Ü™ 30$ –¥–æ—Å–º–æ—Ç—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∏–∑-–∑–∞ –ø—Ä–æ–≤–µ—Ä–æ–∫ –Ω–∞ —Ç–∞–º–æ–∂–Ω–µ (–¥–æ–ø –ø–ª–∞—Ç–µ–∂–∏)\n  ‚Ü™ 15$ –ø–æ–≥—Ä—É–∑–∫–∞ (–¥–æ–ø –ø–ª–∞—Ç–µ–∂–∏)\n  ‚Ü™ 80-120$ —Å—Ç–æ—è–Ω–∫–∞ (–∏–∑-–∑–∞ –∑–∞–≥—Ä—É–∑–æ–∫ –≤ –ø–æ—Ä—Ç—É –∞–≤—Ç–æ, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å—Ç–æ—è—Ç)\n---------\n‚úÖ –û–±—â–∞—è —Ü–µ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_price}\n---------\n‚úÖ –¶–µ–Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞: {car_price}\n‚úÖ –ê—É–∫—Ü–∏–æ–Ω–Ω—ã–π —Å–±–æ—Ä: {auction_fee}\n---------\nüü∞ –ò—Ç–æ–≥–æ: {total} *–ë–µ–∑ —É—á–µ—Ç–∞ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥\n---------\n"

        driver.quit()

    except Exception as error:
        print(error)
    finally:
        session.close()
        del user_sessions[user_id]
        return final_message, total
