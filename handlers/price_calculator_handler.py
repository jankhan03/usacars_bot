from aiogram import types
from utils import kb_and_vars, text
from aiogram.dispatcher import FSMContext
from parser_scripts.parser import parse_price
from parser_scripts.select_options_parser import parse_ports_departure_and_delivery
import asyncio
from handlers.bot_manager import dp, bot
from state_models.models import DeliveryPriceCalculator, ContactInfo
from utils import funcs
from config import admin_id
from parser_scripts import actual_locations_keybord_parser
from aiogram.types import ReplyKeyboardRemove

@dp.message_handler(state=DeliveryPriceCalculator.load_type)
async def answer_load_type(message: types.Message, state: FSMContext):
    answer = message.text

    if answer == text.exit_text:
        await state.finish()
        await message.answer(text.going_to_menue_text, reply_markup=kb_and_vars.main_menu)
        return
    elif answer == text.another or answer == text.load_types_dict[text.pickup]:
        await state.finish()
        await DeliveryPriceCalculator.go_to_manager.set()
        await message.answer("–£—Ç–æ—á–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞", reply_markup=kb_and_vars.go_to_manager_menue)
        await DeliveryPriceCalculator.go_to_manager_another_load_type.set()

        return

    elif answer not in text.load_types_dict.values():
        await message.answer("–í—ã–±—Ä–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑", reply_markup=kb_and_vars.load_type_menue)
        await DeliveryPriceCalculator.load_type.set()
        return

    async with state.proxy() as data:
        data["answer_load_type"] = answer

    await DeliveryPriceCalculator.auction.set()
    await message.answer("üìë –í–∞—à –æ—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç, –≤—ã–±–µ—Ä–µ—Ç–µ –∞—É–∫—Ü–∏–æ–Ω:", reply_markup=kb_and_vars.auction_type_menue)


@dp.message_handler(state=DeliveryPriceCalculator.go_to_manager_another_load_type)
async def answer_go_to_manager_or_no_another_load_type(message: types.Message, state: FSMContext):
    answer = message.text

    if answer == text.exit_text:
        await state.finish()
        await message.answer(text.going_to_menue_text, reply_markup=kb_and_vars.main_menu)
        return

    elif answer == text.go_to_manager_text:
        await state.finish()
        await ContactInfo.tel_number.set()
        await message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏:",
                             reply_markup=kb_and_vars.share_contact_keybord)
    else:
        await message.answer("–í—ã–±—Ä–∞–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è –æ–ø—Ü–∏—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:", reply_markup=kb_and_vars.go_to_manager_menue)
        await DeliveryPriceCalculator.go_to_manager_another_load_type.set()
        return


@dp.message_handler(state=DeliveryPriceCalculator.auction)
async def answer_auction(message: types.Message, state: FSMContext):
    answer = message.text

    if answer == text.exit_text:
        await state.finish()
        await message.answer(text.going_to_menue_text, reply_markup=kb_and_vars.main_menu)
        return

    elif answer not in kb_and_vars.auction_locations_dict.keys():
        await message.answer("–í—ã–±—Ä–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –∞—É–∫—Ü–∏–æ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑", reply_markup=kb_and_vars.auction_type_menue)
        await DeliveryPriceCalculator.auction.set()
        return

    async with state.proxy() as data:
        data["answer_auction"] = answer

        await message.answer("‚è≥ –ò–¥–µ—Ç –ø–æ–¥–±–æ—Ä –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –ø–ª–æ—â–∞–¥–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏...", reply_markup=kb_and_vars.main_menu)

        locations = actual_locations_keybord_parser.parse_actual_locations_keybord(data["answer_auction"],
                                                                               funcs.get_key(text.load_types_dict,
                                                                                             data["answer_load_type"]),
                                                                               message.chat.id)
        locations.pop(0)
        data["actual_locations"] = locations

    await message.answer("üì® –í–∞—à –æ—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç, –≤—ã–±–µ—Ä–µ—Ç–µ –ø–ª–æ—â–∞–¥–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏:",
                         reply_markup=kb_and_vars.get_keybord(locations))
    await DeliveryPriceCalculator.location.set()


@dp.message_handler(state=DeliveryPriceCalculator.location)
async def answer_location(message: types.Message, state: FSMContext):
    answer = message.text

    async with state.proxy() as data:
        if answer == text.exit_text:
            await state.finish()
            await message.answer(text.going_to_menue_text, reply_markup=kb_and_vars.main_menu)
            return
        elif answer not in kb_and_vars.auction_locations_dict[data["answer_auction"]]:
            await message.answer("–í—ã–±—Ä–∞–Ω –Ω–µ–≤–µ—Ä–Ω–∞—è –ø–ª–æ—â–∞–¥–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
                                 reply_markup=
                                 kb_and_vars.get_keybord(kb_and_vars.auction_locations_dict[data["answer_auction"]]))
            await DeliveryPriceCalculator.location.set()
            return

    async with state.proxy() as data:
        data["answer_location"] = answer

    await DeliveryPriceCalculator.port_of_departure.set()

    await message.answer(text.wait_a_bit)

    async with state.proxy() as data:
        data["ports"], data["ports_delivery"] = parse_ports_departure_and_delivery(data["answer_auction"],
                                                                                   data["answer_location"],
                                                                                   funcs.get_key(text.load_types_dict,
                                                                                        data["answer_load_type"]),
                                                                                        message.chat.id,
                                                                                   data["actual_locations"])
        await message.answer("üö¢ –í—ã–±–µ—Ä–µ—Ç–µ –ø–æ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏:", reply_markup=kb_and_vars.get_keybord(data["ports"]))


@dp.message_handler(state=DeliveryPriceCalculator.port_of_departure)
async def answer_port_of_departure(message: types.Message, state: FSMContext):
    answer = message.text

    async with state.proxy() as data:
        if answer == text.exit_text:
            await state.finish()
            await message.answer(text.going_to_menue_text, reply_markup=kb_and_vars.main_menu)
            return
        elif answer not in data["ports"]:
            await message.answer("–í—ã–±—Ä–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
                                 reply_markup=kb_and_vars.get_keybord(data["ports"]))
            await DeliveryPriceCalculator.port_of_departure.set()
            return

    async with state.proxy() as data:
        data["answer_port_of_departure"] = answer
        await message.answer("üö¢ –í—ã–±–µ—Ä–µ—Ç–µ –ø–æ—Ä—Ç –ø—Ä–∏–±—ã—Ç–∏—è:", reply_markup=kb_and_vars.get_keybord(data["ports_delivery"]))

    await DeliveryPriceCalculator.port_of_delivery.set()


@dp.message_handler(state=DeliveryPriceCalculator.port_of_delivery)
async def answer_port_of_delivery(message: types.Message, state: FSMContext):
    answer = message.text

    async with state.proxy() as data:
        if answer == text.exit_text:
            await state.finish()
            await message.answer(text.going_to_menue_text, reply_markup=kb_and_vars.main_menu)
            return
        elif answer not in kb_and_vars.ports_of_delivery:
            if len(data["answer_port_of_departure"]) != 0:
                await message.answer("–í—ã–±—Ä–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—Ç –ø—Ä–∏–±—ã—Ç–∏—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
                                     reply_markup=kb_and_vars.ports_of_delivery_menue)
                await DeliveryPriceCalculator.port_of_delivery.set()
                return
            else:
                pass

    async with state.proxy() as data:
        data["answer_port_of_delivery"] = answer

    await message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö –°–®–ê (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10000)",
                         reply_markup=kb_and_vars.exit_kb)

    await DeliveryPriceCalculator.auction_price.set()


@dp.message_handler(state=DeliveryPriceCalculator.auction_price)
async def answer_auction_price(message: types.Message, state: FSMContext):
    answer = message.text

    if answer == text.exit_text:
        await state.finish()
        await message.answer(text.going_to_menue_text, reply_markup=kb_and_vars.main_menu)
        return

    elif not answer.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –∞ –Ω–µ —Å—Ç—Ä–æ–∫—É", reply_markup=kb_and_vars.exit_kb)
        await DeliveryPriceCalculator.auction_price.set()
        return

    async with state.proxy() as data:
        data["auction_price"] = answer

    await message.answer("‚è≥ –í–∞—à–∞ —Ü–µ–Ω–∞ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è, –æ–∂–∏–¥–∞–π—Ç–µ.", reply_markup=ReplyKeyboardRemove())

    async with state.proxy() as data:
        asyncio.create_task(process_price_parsing(
            message.chat.id,
            funcs.get_key(text.load_types_dict, data["answer_load_type"]),
            data["answer_auction"],
            data["answer_location"],
            data["answer_port_of_departure"],
            data["answer_port_of_delivery"],
            data["ports"],
            data["auction_price"],
            data["actual_locations"],
            is_both_parsers=False,
            state=state)
        )

        await state.finish()


async def process_price_parsing(chat_id: int, load_type, auction, dispatch_site, port_of_departure, port_of_delivery,
                                ports, auction_price, actual_locations, is_both_parsers, state):
    try:

        final_message, total = parse_price(load_type, auction, dispatch_site, port_of_departure, port_of_delivery, ports,
                                          auction_price, chat_id, actual_locations)


        if not is_both_parsers:
            if final_message:
                await bot.send_message(chat_id, final_message, reply_markup=kb_and_vars.main_menu)
                await bot.send_message(admin_id, "–ø–∞—Ä—Å–µ—Ä –î–æ—Å—Ç–∞–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω")
                await DeliveryPriceCalculator.final_stage.set()
                await bot.send_message(chat_id, "–ñ–µ–ª–∞–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–∫–∞–∑–∞?",
                                       reply_markup=kb_and_vars.final_stage_keybord)
            else:
                await state.finish()
                await bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ",
                                       reply_markup=kb_and_vars.main_menu)
        else:
            return final_message, total

    except Exception as _:
        await bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ", reply_markup=kb_and_vars.main_menu)


@dp.message_handler(state=DeliveryPriceCalculator.final_stage)
async def answer_final_stage(message: types.Message, state: FSMContext):
    answer = message.text
    await state.finish()

    if answer == text.exit_text:
        await message.answer(text.going_to_menue_text, reply_markup=kb_and_vars.main_menu)
        return
    elif answer == text.send_contact_info_text:
        await ContactInfo.tel_number.set()
        await message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏:",
                             reply_markup=kb_and_vars.share_contact_keybord)


@dp.message_handler(state=DeliveryPriceCalculator.go_to_manager)
async def go_to_manager(message: types.Message, state: FSMContext):
    answer = message.text

    if answer == text.go_to_manager_text:
        await state.finish()
        await ContactInfo.tel_number.set()
        await message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏:",
                             reply_markup=kb_and_vars.share_contact_keybord)