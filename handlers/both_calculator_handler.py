from aiogram import types
from utils import kb_and_vars, text
from aiogram.dispatcher import FSMContext
from handlers.bot_manager import dp, bot
from state_models.models import BothCalculator, ContactInfo
from parser_scripts.select_options_parser import parse_ports_departure_and_delivery
import asyncio
from handlers.car_customs_calculator_handler import precalculating_car_customs
from utils import funcs
from datetime import datetime
from utils.funcs import get_moto_customs_by_engine_capacity
from handlers.price_calculator_handler import process_price_parsing
from config import admin_id
from parser_scripts import actual_locations_keybord_parser
from aiogram.types import ReplyKeyboardRemove


@dp.message_handler(state=BothCalculator.load_type)
async def answer_load_type_two(message: types.Message, state: FSMContext):
    answer = message.text

    if answer == text.exit_text:
        await state.finish()
        await message.answer(text.going_to_menue_text, reply_markup=kb_and_vars.main_menu)
        return
    elif answer == text.another or answer == text.load_types_dict[text.pickup]:
        await state.finish()
        await BothCalculator.go_to_manager.set()
        await message.answer("–£—Ç–æ—á–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞", reply_markup=kb_and_vars.go_to_manager_menue)
        await BothCalculator.go_to_manager_or_no_another_load_type.set()
        return

    elif answer not in text.load_types_dict.values():
        await message.answer("–í—ã–±—Ä–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π load type, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑", reply_markup=kb_and_vars.load_type_menue)
        await BothCalculator.load_type.set()
        return

    async with state.proxy() as data:
        data["answer_load_type"] = answer
        data["motorcycle"] = text.lfdp_yes if funcs.get_key(text.load_types_dict, data["answer_load_type"]) == text.motorcycle else text.lfdp_no

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞ –≤–∞—à–µ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä 2018):", reply_markup=kb_and_vars.exit_kb)

    await BothCalculator.car_age.set()


@dp.message_handler(state=BothCalculator.go_to_manager_or_no_another_load_type)
async def answer_go_to_manager_or_no_another_load_type(message: types.Message, state: FSMContext):
    answer = message.text

    if answer == text.exit_text:
        await state.finish()
        await message.answer(text.going_to_menue_text, reply_markup=kb_and_vars.main_menu)
        return

    elif answer == text.go_to_manager_text:
        await state.finish()
        await ContactInfo.tel_number.set()
        await message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏:",
                             reply_markup=kb_and_vars.share_contact_keybord)
    else:
        await BothCalculator.go_to_manager_or_no_another_load_type.set()
        await message.answer("–í—ã–±—Ä–∞–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è –æ–ø—Ü–∏—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:", reply_markup=kb_and_vars.go_to_manager_menue)
        return


@dp.message_handler(state=BothCalculator.car_age)
async def answer_car_age(message: types.Message, state: FSMContext):
    answer = message.text
    today_year = int(datetime.today().year)

    if answer == text.exit_text:
        await state.finish()
        await message.answer(text.going_to_menue_text, reply_markup=kb_and_vars.main_menu)
        return

    elif not answer.isdigit():
        await BothCalculator.car_age.set()
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –∞ –Ω–µ —Å—Ç—Ä–æ–∫—É:", reply_markup=kb_and_vars.exit_kb)
        return
    elif int(answer) < 0:
        await BothCalculator.car_age.set()
        await message.answer("–ì–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å >0 :", reply_markup=kb_and_vars.exit_kb)
        return
    elif today_year < int(answer):
        await BothCalculator.car_age.set()
        await message.answer(f"–ß–∏—Å–ª–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ, —á–µ–º {today_year} :", reply_markup=kb_and_vars.exit_kb)
        return

    async with state.proxy() as data:

        data["car_age"] = today_year - int(answer)

    await BothCalculator.electro_or_no.set()

    await message.answer("‚ö°Ô∏è–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç?",
                         reply_markup=kb_and_vars.lfdp_choice_menue)


@dp.message_handler(state=BothCalculator.electro_or_no)
async def answer_car_age_two(message: types.Message, state: FSMContext):
    answer = message.text

    if answer == text.exit_text:
        await state.finish()
        await message.answer(text.going_to_menue_text, reply_markup=kb_and_vars.main_menu)
        return

    elif answer not in [text.lfdp_yes, text.lfdp_no]:
        await BothCalculator.electro_or_no.set()
        await message.answer("–í—ã–±—Ä–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:", reply_markup=kb_and_vars.lfdp_choice_menue)
        return

    async with state.proxy() as data:
        data["electro_or_no"] = answer
        if data["electro_or_no"] == text.lfdp_no:
            await BothCalculator.engine_capacity.set()

            if data["motorcycle"] == text.lfdp_yes:
                await message.answer("‚õΩÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä 650 —Å–º3)", reply_markup=kb_and_vars.exit_kb)
            else:
                await message.answer("‚õΩÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è –≤ —Å–º. –∫—É–±. (2 –ª–∏—Ç—Ä–∞ = 2000 —Å–º. –∫—É–±.)",
                                     reply_markup=kb_and_vars.exit_kb)
        else:
            data["engine_capacity"] = "2000"
            await BothCalculator.lfdp_choice.set()
            await message.answer("üìÑ –õ—å–≥–æ—Ç–Ω–∞—è —Ç–∞–º–æ–∂–Ω—è –ø–æ–¥ 1Ô∏è‚É£4Ô∏è‚É£0Ô∏è‚É£ —É–∫–∞–∑?", reply_markup=kb_and_vars.lfdp_choice_menue)

@dp.message_handler(state=BothCalculator.engine_capacity)
async def answer_engine_capacity_two(message: types.Message, state: FSMContext):
    answer = message.text

    if answer == text.exit_text:
        await state.finish()
        await message.answer(text.going_to_menue_text, reply_markup=kb_and_vars.main_menu)
        return

    elif not answer.isdigit():
        await BothCalculator.engine_capacity.set()
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –∞ –Ω–µ —Å—Ç—Ä–æ–∫—É:", reply_markup=kb_and_vars.exit_kb)
        return

    elif int(answer) <= 0:
        await BothCalculator.engine_capacity.set()
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –Ω—É–ª—è", reply_markup=kb_and_vars.exit_kb)
        return

    async with state.proxy() as data:
        data["engine_capacity"] = answer

        if data["motorcycle"] == text.lfdp_yes:

            await BothCalculator.auction.set()

            await message.answer("üìë –í–∞—à –æ—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç, –≤—ã–±–µ—Ä–µ—Ç–µ –∞—É–∫—Ü–∏–æ–Ω:", reply_markup=kb_and_vars.auction_type_menue)
            return

    await BothCalculator.lfdp_choice.set()
    await message.answer("üìÑ –õ—å–≥–æ—Ç–Ω–∞—è —Ç–∞–º–æ–∂–Ω—è –ø–æ–¥ 1Ô∏è‚É£4Ô∏è‚É£0Ô∏è‚É£ —É–∫–∞–∑?", reply_markup=kb_and_vars.lfdp_choice_menue)


@dp.message_handler(state=BothCalculator.lfdp_choice)
async def answer_lfdp_choice_two(message: types.Message, state: FSMContext):
    answer = message.text

    if answer == text.exit_text:
        await state.finish()
        await message.answer(text.going_to_menue_text, reply_markup=kb_and_vars.main_menu)
        return

    elif answer not in [text.lfdp_yes, text.lfdp_no]:
        await BothCalculator.lfdp_choice.set()
        await message.answer("–í—ã–±—Ä–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:", reply_markup=kb_and_vars.lfdp_choice_menue)
        return

    async with state.proxy() as data:
        data["lfdp_choice"] = answer

    await BothCalculator.auction.set()

    await message.answer("üìë –í–∞—à –æ—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç, –≤—ã–±–µ—Ä–µ—Ç–µ –∞—É–∫—Ü–∏–æ–Ω:", reply_markup=kb_and_vars.auction_type_menue)


@dp.message_handler(state=BothCalculator.auction)
async def answer_auction_two(message: types.Message, state: FSMContext):
    answer = message.text

    if answer == text.exit_text:
        await state.finish()
        await message.answer(text.going_to_menue_text, reply_markup=kb_and_vars.main_menu)
        return

    elif answer not in kb_and_vars.auction_locations_dict.keys():
        await message.answer("–í—ã–±—Ä–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –∞—É–∫—Ü–∏–æ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑", reply_markup=kb_and_vars.auction_type_menue)
        await BothCalculator.auction.set()
        return

    async with state.proxy() as data:
        data["answer_auction"] = answer

        await message.answer("‚è≥ –ò–¥–µ—Ç –ø–æ–¥–±–æ—Ä –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –ø–ª–æ—â–∞–¥–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏...", reply_markup=kb_and_vars.main_menu)

        locations = actual_locations_keybord_parser.parse_actual_locations_keybord(data["answer_auction"],
                                                                                   funcs.get_key(text.load_types_dict,
                                                                                                 data[
                                                                                                     "answer_load_type"]),
                                                                                   message.chat.id)
        locations.pop(0)
        data["actual_locations"] = locations

    await message.answer("üì® –í–∞—à –æ—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç, –≤—ã–±–µ—Ä–µ—Ç–µ –ø–ª–æ—â–∞–¥–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏:",
                         reply_markup=kb_and_vars.get_keybord(locations))
    await BothCalculator.location.set()


@dp.message_handler(state=BothCalculator.location)
async def answer_location_two(message: types.Message, state: FSMContext):
    answer = message.text

    async with state.proxy() as data:
        if answer == text.exit_text:
            await state.finish()
            await message.answer(text.going_to_menue_text, reply_markup=kb_and_vars.main_menu)
            return
        elif answer not in kb_and_vars.auction_locations_dict[data["answer_auction"]]:
            await message.answer("–í—ã–±—Ä–∞–Ω –Ω–µ–≤–µ—Ä–Ω–∞—è –ø–ª–æ—â–∞–¥–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
                                 reply_markup=
                                 kb_and_vars.get_keybord(kb_and_vars.auction_locations_dict[data["answer_auction"]]))
            await BothCalculator.location.set()
            return

    async with state.proxy() as data:
        data["answer_location"] = answer

    await BothCalculator.port_of_departure.set()

    await message.answer(text.wait_a_bit)

    async with state.proxy() as data:
        data["ports"], data["ports_delivery"] = parse_ports_departure_and_delivery(data["answer_auction"],
                                                                                   data["answer_location"],
                                                                                   funcs.get_key(text.load_types_dict,
                                                                                                 data[
                                                                                                     "answer_load_type"]),
                                                                                   message.chat.id,
                                                                                   data["actual_locations"])
        await message.answer("üö¢ –í—ã–±–µ—Ä–µ—Ç–µ –ø–æ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏:", reply_markup=kb_and_vars.get_keybord(data["ports"]))


@dp.message_handler(state=BothCalculator.port_of_departure)
async def answer_port_of_departure_two(message: types.Message, state: FSMContext):
    answer = message.text

    async with state.proxy() as data:
        if answer == text.exit_text:
            await state.finish()
            await message.answer(text.going_to_menue_text, reply_markup=kb_and_vars.main_menu)
            return
        elif answer not in data["ports"]:
            await message.answer("–í—ã–±—Ä–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
                                 reply_markup=kb_and_vars.get_keybord(data["ports"]))
            await BothCalculator.port_of_departure.set()
            return

    async with state.proxy() as data:
        data["answer_port_of_departure"] = answer
        await message.answer("üö¢ –í—ã–±–µ—Ä–µ—Ç–µ –ø–æ—Ä—Ç –ø—Ä–∏–±—ã—Ç–∏—è:", reply_markup=kb_and_vars.get_keybord(data["ports_delivery"]))

    await BothCalculator.port_of_delivery.set()


@dp.message_handler(state=BothCalculator.port_of_delivery)
async def answer_port_of_delivery_two(message: types.Message, state: FSMContext):
    answer = message.text

    async with state.proxy() as data:
        if answer == text.exit_text:
            await state.finish()
            await message.answer(text.going_to_menue_text, reply_markup=kb_and_vars.main_menu)
            return
        elif answer not in kb_and_vars.ports_of_delivery:
            if len(data["answer_port_of_departure"]) != 0:
                await message.answer("–í—ã–±—Ä–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—Ç –ø—Ä–∏–±—ã—Ç–∏—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
                                     reply_markup=kb_and_vars.ports_of_delivery_menue)
                await BothCalculator.port_of_delivery.set()
                return
            else:
                pass

    async with state.proxy() as data:
        data["answer_port_of_delivery"] = answer

    await message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö –°–®–ê (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10000)",
                         reply_markup=kb_and_vars.exit_kb)

    await BothCalculator.auction_price.set()


@dp.message_handler(state=BothCalculator.auction_price)
async def answer_auction_price_two(message: types.Message, state: FSMContext):
    answer = message.text

    if not answer.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –∞ –Ω–µ —Å—Ç—Ä–æ–∫—É", reply_markup=kb_and_vars.exit_kb)
        await BothCalculator.auction_price.set()
        return

    async with state.proxy() as data:
        data["auction_price"] = answer

    await message.answer("‚è≥ –í–∞—à–∞ —Ü–µ–Ω–∞ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è, –æ–∂–∏–¥–∞–π—Ç–µ.", reply_markup=ReplyKeyboardRemove())

    async with state.proxy() as data:
        task1 = process_price_parsing(
            message.chat.id,
            funcs.get_key(text.load_types_dict, data["answer_load_type"]),
            data["answer_auction"],
            data["answer_location"],
            data["answer_port_of_departure"],
            data["answer_port_of_delivery"],
            data["ports"],
            data["auction_price"],
            data["actual_locations"],
            is_both_parsers=True, state=state)

        if data["motorcycle"] == text.lfdp_no:
            task2 = precalculating_car_customs(
                data["car_age"],
                data["auction_price"],
                data["engine_capacity"],
                data["lfdp_choice"],
                message.chat.id,
                data["electro_or_no"],
                is_both_parsers=True, state=state)

            result1, result2 = await asyncio.gather(*[task1, task2])
            if not result1 or not result2:
                await state.finish()
                await bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ",
                                       reply_markup=kb_and_vars.main_menu)
                return
            message1, sum1 = result1
            message2, sum2 = result2

        else:
            message2, sum2 = get_moto_customs_by_engine_capacity(data["engine_capacity"], True if data["electro_or_no"] == text.lfdp_yes else False, data["auction_price"])

            result1 = await task1

            message1, sum1 = result1

        await state.finish()

        await BothCalculator.final_stage.set()

        if message1 and message2:
            await bot.send_message(message.chat.id,
                                   message1 + "\n" + message2 + "\n" + "\n" + f"‚≠êÔ∏è –ò–¢–û–ì–û: {funcs.sum_prices([sum1, sum2])} –ø–æ –∫—É—Ä—Å—É –ù–ë–†–ë –Ω–∞ {funcs.get_today_formatted_date()}",
                                   reply_markup=kb_and_vars.final_stage_keybord)

            await bot.send_message(message.chat.id, "–ñ–µ–ª–∞–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–∫–∞–∑–∞?",
                                   reply_markup=kb_and_vars.final_stage_keybord)
            await bot.send_message(admin_id, "–ø–∞—Ä—Å–µ—Ä –†–∞—Å—Ç–∞–º–æ–∂–∫–∞+–î–æ—Å—Ç–∞–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω")
        else:
            await state.finish()
            await bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ",
                                   reply_markup=kb_and_vars.main_menu)


@dp.message_handler(state=BothCalculator.go_to_manager)
async def go_to_manager(message: types.Message, state: FSMContext):
    answer = message.text

    if answer == text.go_to_manager_text:
        await state.finish()
        await ContactInfo.tel_number.set()
        await message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏:",
                             reply_markup=kb_and_vars.share_contact_keybord)


@dp.message_handler(state=BothCalculator.final_stage)
async def answer_port_of_final_stage(message: types.Message, state: FSMContext):
    answer = message.text
    await state.finish()

    if answer == text.exit_text:
        await message.answer(text.going_to_menue_text, reply_markup=kb_and_vars.main_menu)
        return
    elif answer == text.send_contact_info_text:
        await ContactInfo.tel_number.set()
        await message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏:",
                             reply_markup=kb_and_vars.share_contact_keybord)
